org: marutyan21
app: user-managment
service: task-1
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: us-west-1
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    CAR_TABLE: car-table-dev

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminGetUser
      Resource: "*"

functions:
  loginUser:
    handler: lambda/user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: lambda/user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  deleteAPI:
    handler: lambda/user/delete.handler
    events:
      - http:
          path: user/delete
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  createCar:
    handler: lambda/car/create.handler
    events:
      - http:
          path: car/create
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  editCar:
    handler: lambda/car/edit.handler
    events:
      - http:
          path: car/edit/{id}
          method: put
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  deleteCar:
    handler: lambda/car/delete.handler
    events:
      - http:
          path: car/delete/{id}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  listCar:
    handler: lambda/car/list.handler
    events:
      - http:
          path: car/list
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    CarTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: license_plate
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: license_plate
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: car-table-dev
